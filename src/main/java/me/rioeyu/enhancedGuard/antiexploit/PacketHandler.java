package me.rioeyu.enhancedGuard.antiexploit;

import me.rioeyu.enhancedGuard.EnhancedGuard;
import me.rioeyu.enhancedGuard.utils.ConfigLoader;
import me.rioeyu.enhancedGuard.utils.Messages;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerChannelEvent;
import org.bukkit.plugin.messaging.PluginMessageListener;

public class PacketHandler implements PluginMessageListener, Listener {
    private final EnhancedGuard plugin;
    private final ConfigLoader configLoader;
    private final Messages messages;
    private static final String[] BLOCKED_CHANNELS = {
            "tab:bridge",
            "wdl:init",
            "minecraft:brand",
            "fabric:registry/sync"
    };

    public PacketHandler(EnhancedGuard plugin, ConfigLoader configLoader, Messages messages) {
        this.plugin = plugin;
        this.configLoader = configLoader;
        this.messages = messages;

        for (String channel : BLOCKED_CHANNELS) {
            plugin.getServer().getMessenger().registerIncomingPluginChannel(plugin, channel, this);
        }
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void onPluginMessageReceived(String channel, Player player, byte[] message) {
        if (!configLoader.isPacketProtectionEnabled()) {
            return;
        }

        if (channel.contains("tab:bridge")) {
            plugin.getLogger().warning("Blocked TabBridge packet from " + player.getName());
            player.kickPlayer(messages.get("packet.blocked"));
        }
    }

    @EventHandler
    public void onPlayerChannel(PlayerChannelEvent event) {
        if (!configLoader.isPacketProtectionEnabled()) {
            return;
        }

        String channel = event.getChannel();
        for (String blocked : BLOCKED_CHANNELS) {
            if (channel.contains(blocked)) {
                Player player = event.getPlayer();
                plugin.getServer().getMessenger().unregisterIncomingPluginChannel(plugin, channel);
                plugin.getLogger().warning("Blocked channel registration from " + player.getName() + ": " + channel);
                player.kickPlayer(messages.get("packet.blocked"));
                break;
            }
        }
    }

    public void injectPlayer(Player player) {}
    public void removePlayer(Player player) {}

    public void cleanup() {
        for (String channel : BLOCKED_CHANNELS) {
            plugin.getServer().getMessenger().unregisterIncomingPluginChannel(plugin, channel);
        }
    }
}